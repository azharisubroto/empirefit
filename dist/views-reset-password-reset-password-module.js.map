{"version":3,"sources":["webpack:///./src/app/shared/services/user.service.ts","webpack:///./src/app/views/reset-password/reset-password-routing.module.ts","webpack:///./src/app/views/reset-password/reset-password.module.ts","webpack:///./src/app/views/reset-password/reset/reset.component.html","webpack:///./src/app/views/reset-password/reset/reset.component.scss","webpack:///./src/app/views/reset-password/reset/reset.component.ts"],"names":[],"mappings":"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","file":"views-reset-password-reset-password-module.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { LocalStoreService } from \"./local-store.service\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class UserService {\n  readonly apiURL = \"https://api.empirefit.club/api\";\n  // readonly apiURL = \"http://localhost/efc/api\";\n\n  constructor(private http: HttpClient, private store: LocalStoreService) { }\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      Authorization: \"Bearer \" + this.store.getItem(\"access_token\")\n    })\n  };\n\n  showUser(id) {\n    return this.http.get(this.apiURL + \"/users/\" + id, this.httpOptions);\n  }\n\n  getUsers() {\n    return this.http.get(this.apiURL + \"/users\", this.httpOptions);\n  }\n\n  getSingleUser() {\n    return this.http.get(this.apiURL + \"/get_user\", this.httpOptions);\n  }\n\n  userCheckPassword(id, data) {\n    return this.http.post(this.apiURL + \"/check_password/\" + id, data, this.httpOptions);\n  }\n\n  updateUser(id, data) {\n    return this.http.put(this.apiURL + \"/users/\" + id, data, this.httpOptions);\n  }\n\n  createUser(data) {\n    return this.http.post(this.apiURL + \"/users\", data, this.httpOptions);\n  }\n\n  deleteUser(id) {\n    return this.http.delete(this.apiURL + \"/users/\" + id, this.httpOptions);\n  }\n\n  resetPassword(data) {\n    return this.http.post(this.apiURL + \"/reset_password\", data, this.httpOptions);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ResetComponent } from './reset/reset.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ResetPasswordRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ResetPasswordRoutingModule } from './reset-password-routing.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { SharedComponentsModule } from 'src/app/shared/components/shared-components.module';\nimport { ResetComponent } from './reset/reset.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SharedComponentsModule,\n    ResetPasswordRoutingModule\n  ],\n  declarations: [ResetComponent]\n})\nexport class ResetPasswordModule { }\n","module.exports = \"<div class=\\\"breadcrumb\\\">\\n  <h1>Reset Password</h1>\\n</div>\\n\\n<div class=\\\"separator-breadcrumb border-top\\\"></div>\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-12\\\">\\n    <div class=\\\"card mb-4\\\">\\n      <div class=\\\"card-body\\\">\\n        <div class=\\\"card-title mb-3\\\">Form reset password</div>\\n        <form [formGroup]=\\\"resetForm\\\" (ngSubmit)=\\\"submit()\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-12 form-group mb-3\\\">\\n              <label for=\\\"old_password\\\">Old password</label>\\n              <input autofocus type=\\\"password\\\" class=\\\"form-control \\\" id=\\\"old_password\\\" placeholder=\\\"Enter old password \\\"\\n                formControlName=\\\"old_password\\\" />\\n              <i *ngIf=\\\"\\n                  !resetForm.get('old_password').valid &&\\n                  resetForm.get('old_password').touched\\n                \\\" class=\\\"i-Information text-danger\\\">\\n                Please enter old password</i>\\n            </div>\\n\\n            <div class=\\\"col-md-6 form-group mb-3\\\">\\n              <label for=\\\"new_password\\\">New password</label>\\n              <input type=\\\"password\\\" class=\\\"form-control \\\" id=\\\"new_password\\\" placeholder=\\\"Enter new password \\\"\\n                formControlName=\\\"new_password\\\" />\\n              <i *ngIf=\\\"!resetForm.get('new_password').valid && resetForm.get('new_password').touched\\\"\\n                class=\\\"i-Information text-danger\\\">\\n                Please enter new password</i>\\n            </div>\\n\\n            <div class=\\\"col-md-6 form-group mb-3\\\">\\n              <label for=\\\"password_confirmation\\\">Confirmation password</label>\\n              <input type=\\\"password\\\" class=\\\"form-control \\\" id=\\\"password_confirmation\\\"\\n                placeholder=\\\"Enter confirmation password \\\" formControlName=\\\"password_confirmation\\\">\\n              <i *ngIf=\\\"!resetForm.get('password_confirmation').valid && resetForm.get('password_confirmation').touched\\\"\\n                class=\\\"i-Information text-danger\\\">\\n                Please enter confirmation password</i>\\n            </div>\\n\\n            <div class=\\\"col-md-12\\\">\\n              <btn-loading btnClass=\\\"btn-primary btn-rounded\\\" [loading]=\\\"loading\\\">Save</btn-loading>\\n            </div>\\n          </div>\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0L3Jlc2V0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from \"@angular/core\";\nimport { CustomValidators } from \"ng2-validation\";\nimport {\n  FormGroup,\n  FormBuilder,\n  FormControl,\n  Validators\n} from \"@angular/forms\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { UserService } from \"src/app/shared/services/user.service\";\nimport { LocalStoreService } from \"src/app/shared/services/local-store.service\";\n\n@Component({\n  selector: \"app-reset-form\",\n  templateUrl: \"./reset.component.html\",\n  styleUrls: [\"./reset.component.scss\"]\n})\nexport class ResetComponent implements OnInit {\n  formBasic: FormGroup;\n  loading: boolean;\n  branch_name;\n  resetForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private toastr: ToastrService,\n    private router: Router,\n    private userService: UserService,\n    private store: LocalStoreService,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.resetForm = this.fb.group({\n      old_password: [\"*****\", Validators.required],\n      new_password: [\"*****\"],\n      password_confirmation: [\"*****\", Validators.required]\n    });\n  }\n\n  submit() {\n    if (this.resetForm.invalid) {\n      this.loading = false;\n      return alert('Please completed form');\n    } else {\n      this.loading = true;\n      this.userService\n        .resetPassword(\n          this.resetForm.value\n        )\n        .toPromise()\n        .then(res => {\n          this.loading = false;\n          if (res['status'] == '200') {\n            this.toastr.success(res[\"message\"], \"Success!\", {\n              progressBar: true\n            });\n            this.store.clear();\n            this.router.navigateByUrl(\"/sessions/signin\");\n          } else {\n            this.toastr.error(res[\"message\"], \"Error!\", {\n              progressBar: true\n            });\n          }\n        })\n        .catch(res => {\n          this.loading = false;\n          this.toastr.error(res[\"statusText\"], \"Error!\", {\n            progressBar: true\n          });\n        })\n    }\n  }\n}\n"],"sourceRoot":""}